# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
jobs:
- job: BuildMac
  displayName: Build for MacOS
  dependsOn: [] # by specifying an empty array, this stage doesn't depend on the stage before it
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - task: SonarQubePrepare@4
    inputs:
      SonarQube: 'Peach'
      scannerMode: 'CLI'
      configMode: 'manual'
      cliProjectKey: 'geoffray-hello-world-xcode'
      cliProjectName: 'geoffray-hello-world-xcode'
      extraProperties: 'sonar.cfamily.build-wrapper-output=build_wrapper_output_directory_mac'
      cliSources: '.'
  - bash: |
      curl 'https://peach.sonarsource.com/static/cpp/build-wrapper-macosx-x86.zip' --output build-wrapper-macosx-x86.zip
      unzip build-wrapper-macosx-x86.zip
    displayName: Install buildwrapper
  - bash: |
      build-wrapper-macosx-x86/build-wrapper-macosx-x86 --out-dir build_wrapper_output_directory_mac /usr/bin/xcodebuild -configuration Release -workspace hello-world-xcode.xcodeproj/project.xcworkspace -scheme hello-world-xcode build CODE_SIGNING_ALLOWED=NO
    displayName: Compile project in build wrapper
  - bash: |
      ls -larth build_wrapper_output_directory_mac
      cat build_wrapper_output_directory_mac/build-wrapper-dump.json
      echo '======== end of json dump ========'
      cat build_wrapper_output_directory_mac/build-wrapper.*
      echo '======== end of log dump ========'
  - task: SonarQubeAnalyze@4
  
#   - bash: |
#       /usr/bin/xcodebuild -configuration Release -workspace hello-world-xcode.xcodeproj/project.xcworkspace -scheme hello-world-xcode build CODE_SIGNING_ALLOWED=NO
  # - task: Xcode@5
  #   inputs:
  #     actions: 'build'
  #     configuration: 'Release'
  #     sdk: 
  #     packageApp: false